{"ast":null,"code":"import _classCallCheck from \"D:\\\\OceanTech\\\\nimpe\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\OceanTech\\\\nimpe\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\OceanTech\\\\nimpe\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\OceanTech\\\\nimpe\\\\Client-V2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\OceanTech\\\\nimpe\\\\Client-V2\\\\src\\\\app\\\\views\\\\Map\\\\Map.jsx\";\nimport \"./MapStyle.css\";\nimport { Button } from \"@material-ui/core\";\nimport { Fullscreen, Today } from \"@material-ui/icons\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport React, { PureComponent } from \"react\";\nimport moment from \"moment\";\nimport DatePicker from \"react-date-picker\";\nimport { Helmet } from \"react-helmet\";\nimport ReactMapGL, { NavigationControl, Popup, Marker, FlyToInterpolator } from \"react-map-gl\";\nimport { getListPatient, getListVector } from \"./MapServices\"; //import {Pin_layer_patient, Pin_layer_vector} from \"./Pin_layer\";\n\nimport Pin_layer_patient from \"./Pin_layer_patient\";\nimport Pin_layer_vector from \"./Pin_layer_vector\";\nimport Infor from \"./Patient_Infor\";\nimport SquareLoading from \"../Component/Loading/SquareLoading\";\nvar MAPBOX_TOKEN = \"pk.eyJ1IjoibWVvMTIzIiwiYSI6ImNrdTI2MTQzZzBoNzMyd3FrNWVpc3U1YjEifQ.zj-vYL4EgQI83LzH8w8n6g\";\n\nvar DengueMapComponent = /*#__PURE__*/function (_PureComponent) {\n  _inherits(DengueMapComponent, _PureComponent);\n\n  var _super = _createSuper(DengueMapComponent);\n\n  function DengueMapComponent(props) {\n    var _this;\n\n    _classCallCheck(this, DengueMapComponent);\n\n    _this = _super.call(this, props);\n\n    _this.setListPatient = function (data) {\n      _this.setState({\n        listPatient: data\n      });\n    };\n\n    _this.setListVector = function (data) {\n      _this.setState({\n        listVector: data\n      });\n    };\n\n    _this.listPatientError = function () {\n      _this.setState({\n        loading: false,\n        listPatient: []\n      });\n    };\n\n    _this.listVectorError = function () {\n      _this.setState({\n        loading: false,\n        listVector: []\n      });\n    };\n\n    _this.pinAboutPatientAndVector = function () {\n      _this.setState({\n        loading: true\n      });\n\n      var searchObject = {};\n      var setListPatient = _this.setListPatient;\n      var setListVector = _this.setListVector;\n      var listPatientError = _this.listPatientError;\n      var listVectorError = _this.listVectorError;\n      searchObject.year = moment(_this.state.selectedMonth).format(\"yyyy\");\n      searchObject.month = moment(_this.state.selectedMonth).format(\"MM\");\n      getListPatient(searchObject).then(function (res) {\n        var data = res.data;\n        setListPatient(data);\n\n        _this.setState({\n          loading: false\n        });\n      }).catch(function (error) {\n        listPatientError();\n        return Promise.reject(error);\n      });\n      getListVector(searchObject).then(function (res) {\n        var data = res.data;\n\n        _this.setState({\n          loading: false\n        });\n\n        setListVector(data);\n      }).catch(function (error) {\n        listVectorError();\n        return Promise.reject(error);\n      });\n    };\n\n    _this.onClosePopup = function () {\n      _this.setState({\n        showPopup: false\n      });\n    };\n\n    _this.handleDateChange = function (date) {\n      _this.setState({\n        selectedMonth: date\n      }, function () {\n        return _this.pinAboutPatientAndVector();\n      });\n    };\n\n    _this.viewFullScreen = function () {\n      var elem = document.getElementById(\"map-wrapper\");\n\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen();\n\n        _this.setState({\n          fullScreen: true\n        });\n      } else if (elem.webkitRequestFullscreen) {\n        elem.webkitRequestFullscreen();\n\n        _this.setState({\n          fullScreen: true\n        });\n      } else if (elem.msRequestFullscreen) {\n        elem.msRequestFullscreen();\n\n        _this.setState({\n          fullScreen: true\n        });\n      }\n    };\n\n    _this.exitFullScreen = function () {\n      window.document.exitFullscreen().then(function (success) {\n        return console.log(success);\n      });\n\n      _this.setState({\n        fullScreen: false\n      });\n    };\n\n    _this.state = {\n      viewport: {\n        longitude: 105.7933994,\n        latitude: 21.0282951,\n        zoom: 14\n      },\n      longitude: 105.7926785,\n      latitude: 21.0283643,\n      selectedMonth: new Date(),\n      fullScreen: false,\n      listPatient: [],\n      listVector: [],\n      patientInfor: null,\n      vectorInfor: null,\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(DengueMapComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.pinAboutPatientAndVector();\n    }\n  }, {\n    key: \"Patient_renderPopup\",\n    value: function Patient_renderPopup() {\n      var _this2 = this;\n\n      var patientInfor = this.state.patientInfor;\n      return patientInfor && /*#__PURE__*/React.createElement(Popup, {\n        tipSize: 5,\n        anchor: \"top\",\n        longitude: parseFloat(patientInfor.longitude),\n        latitude: parseFloat(patientInfor.latitude),\n        closeOnClick: false,\n        onClose: function onClose() {\n          return _this2.setState({\n            patientInfor: null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Infor, {\n        infor: patientInfor,\n        _type: \"Ca b\\u1EC7nh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 6\n        }\n      }));\n    }\n  }, {\n    key: \"Vector_renderPopup\",\n    value: function Vector_renderPopup() {\n      var _this3 = this;\n\n      var vectorInfor = this.state.vectorInfor;\n      return vectorInfor && /*#__PURE__*/React.createElement(Popup, {\n        tipSize: 5,\n        anchor: \"top\",\n        longitude: parseFloat(vectorInfor.longitude),\n        latitude: parseFloat(vectorInfor.latitude),\n        closeOnClick: false,\n        onClose: function onClose() {\n          return _this3.setState({\n            vectorInfor: null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(Infor, {\n        infor: vectorInfor,\n        _type: \"Vector truy\\u1EC1n b\\u1EC7nh\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 6\n        }\n      }));\n    } // metersToPixelsAtMaxZoom = (meters, latitude) =>\n    //   meters / 0.075 / Math.cos((latitude * Math.PI) / 180);\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          viewport = _this$state.viewport,\n          selectedMonth = _this$state.selectedMonth,\n          fullScreen = _this$state.fullScreen,\n          listPatient = _this$state.listPatient,\n          listVector = _this$state.listVector,\n          loading = _this$state.loading;\n      var t = this.props.t;\n      var markersPatient = listPatient.map(function (patient) {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: patient.name,\n          longitude: parseFloat(patient.longitude),\n          latitude: parseFloat(patient.latitude),\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 4\n          }\n        }, /*#__PURE__*/React.createElement(Pin_layer_patient, {\n          onClick: function onClick() {\n            return _this4.setState({\n              patientInfor: patient\n            });\n          },\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 5\n          }\n        }));\n      });\n      var markersVector = listVector.map(function (vector) {\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: vector.name,\n          longitude: parseFloat(vector.longitude),\n          latitude: parseFloat(vector.latitude),\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 4\n          }\n        }, /*#__PURE__*/React.createElement(Pin_layer_vector, {\n          onClick: function onClick() {\n            return _this4.setState({\n              vectorInfor: vector\n            });\n          },\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 5\n          }\n        }));\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"flex\",\n        id: \"map-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 4\n        }\n      }, /*#__PURE__*/React.createElement(Helmet, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 6\n        }\n      }, \"Bản đồ điều tra SXH\", \" | \", \"Facility Service\")), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"0\",\n          left: \"0\",\n          zIndex: \"999\",\n          backgroundColor: \"#fff\",\n          height: \"25vh\",\n          padding: \"30px 20px 20px 20px\",\n          margin: \"5px\",\n          display: \"flex\",\n          borderRadius: \"10px\",\n          flexDirection: \"column\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(DatePicker, {\n        onChange: function onChange(event) {\n          return _this4.handleDateChange(event);\n        } //onChange={this.handleDateChange}\n        ,\n        value: selectedMonth,\n        locale: \"vi-VN\",\n        format: \"M/yyyy\",\n        maxDetail: \"year\",\n        closeCalendar: true,\n        clearIcon: null,\n        calendarClassName: \"month-picker\",\n        calendarIcon: /*#__PURE__*/React.createElement(Today, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 21\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 6\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        onClick: fullScreen === true ? this.exitFullScreen : this.viewFullScreen,\n        color: fullScreen ? \"secondary\" : \"primary\",\n        variant: \"contained\",\n        className: \"mt-20\",\n        startIcon: /*#__PURE__*/React.createElement(Fullscreen, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 18\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 6\n        }\n      }, fullScreen === true ? t(\"exitFullScreen\") : t(\"fullScreen\"))), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: \"60vw\",\n          height: \"100vh\",\n          flex: \"1\",\n          position: \"relative\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 5\n        }\n      }, loading && /*#__PURE__*/React.createElement(SquareLoading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 18\n        }\n      }), /*#__PURE__*/React.createElement(ReactMapGL, Object.assign({}, viewport, {\n        width: \"100%\",\n        height: \"100%\",\n        mapStyle: \"mapbox://styles/mapbox/streets-v11\",\n        mapboxApiAccessToken: MAPBOX_TOKEN,\n        onViewportChange: function onViewportChange(viewport) {\n          return _this4.setState({\n            viewport: viewport\n          });\n        },\n        attributionControl: false,\n        onClick: this.onMapClick,\n        transitionDuration: 150,\n        transitionInterpolator: new FlyToInterpolator(),\n        onLoad: function onLoad() {\n          return _this4.setState({\n            loading: false\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 6\n        }\n      }), markersPatient, markersVector, this.Patient_renderPopup(), this.Vector_renderPopup(), /*#__PURE__*/React.createElement(NavigationControl, {\n        style: {\n          top: 10,\n          right: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 7\n        }\n      }))));\n    }\n  }]);\n\n  return DengueMapComponent;\n}(PureComponent);\n\nexport default DengueMapComponent;","map":{"version":3,"sources":["D:/OceanTech/nimpe/Client-V2/src/app/views/Map/Map.jsx"],"names":["Button","Fullscreen","Today","React","PureComponent","moment","DatePicker","Helmet","ReactMapGL","NavigationControl","Popup","Marker","FlyToInterpolator","getListPatient","getListVector","Pin_layer_patient","Pin_layer_vector","Infor","SquareLoading","MAPBOX_TOKEN","DengueMapComponent","props","setListPatient","data","setState","listPatient","setListVector","listVector","listPatientError","loading","listVectorError","pinAboutPatientAndVector","searchObject","year","state","selectedMonth","format","month","then","res","catch","error","Promise","reject","onClosePopup","showPopup","handleDateChange","date","viewFullScreen","elem","document","getElementById","requestFullscreen","fullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullScreen","window","exitFullscreen","success","console","log","viewport","longitude","latitude","zoom","Date","patientInfor","vectorInfor","parseFloat","t","markersPatient","map","patient","name","markersVector","vector","position","top","left","zIndex","backgroundColor","height","padding","margin","display","borderRadius","flexDirection","event","width","flex","onMapClick","Patient_renderPopup","Vector_renderPopup","right"],"mappings":";;;;;AAAA,OAAO,gBAAP;AACA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,UAAT,EAAqBC,KAArB,QAAkC,oBAAlC;AACA,OAAO,8BAAP;AACA,OAAOC,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,OAAOC,UAAP,IACCC,iBADD,EAECC,KAFD,EAGCC,MAHD,EAICC,iBAJD,QAKO,cALP;AAMA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,eAA9C,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,aAAP,MAA0B,oCAA1B;AAEA,IAAMC,YAAY,GACjB,0FADD;;IAGMC,kB;;;;;AACL,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAClB,8BAAMA,KAAN;;AADkB,UAqBnBC,cArBmB,GAqBF,UAAAC,IAAI,EAAI;AACxB,YAAKC,QAAL,CAAc;AACbC,QAAAA,WAAW,EAAEF;AADA,OAAd;AAGA,KAzBkB;;AAAA,UA2BnBG,aA3BmB,GA2BH,UAAAH,IAAI,EAAI;AACvB,YAAKC,QAAL,CAAc;AACbG,QAAAA,UAAU,EAAEJ;AADC,OAAd;AAGA,KA/BkB;;AAAA,UAiCnBK,gBAjCmB,GAiCA,YAAM;AACxB,YAAKJ,QAAL,CAAc;AACbK,QAAAA,OAAO,EAAE,KADI;AAEbJ,QAAAA,WAAW,EAAE;AAFA,OAAd;AAIA,KAtCkB;;AAAA,UAwCnBK,eAxCmB,GAwCD,YAAM;AACvB,YAAKN,QAAL,CAAc;AACbK,QAAAA,OAAO,EAAE,KADI;AAEbF,QAAAA,UAAU,EAAE;AAFC,OAAd;AAIA,KA7CkB;;AAAA,UA+CnBI,wBA/CmB,GA+CQ,YAAM;AAChC,YAAKP,QAAL,CAAc;AACbK,QAAAA,OAAO,EAAE;AADI,OAAd;;AAGA,UAAIG,YAAY,GAAG,EAAnB;AACA,UAAMV,cAAc,GAAG,MAAKA,cAA5B;AACA,UAAMI,aAAa,GAAG,MAAKA,aAA3B;AACA,UAAME,gBAAgB,GAAG,MAAKA,gBAA9B;AACA,UAAME,eAAe,GAAG,MAAKA,eAA7B;AACAE,MAAAA,YAAY,CAACC,IAAb,GAAoB5B,MAAM,CAAC,MAAK6B,KAAL,CAAWC,aAAZ,CAAN,CAAiCC,MAAjC,CAAwC,MAAxC,CAApB;AACAJ,MAAAA,YAAY,CAACK,KAAb,GAAqBhC,MAAM,CAAC,MAAK6B,KAAL,CAAWC,aAAZ,CAAN,CAAiCC,MAAjC,CAAwC,IAAxC,CAArB;AAEAvB,MAAAA,cAAc,CAACmB,YAAD,CAAd,CACEM,IADF,CACO,UAAAC,GAAG,EAAI;AACZ,YAAIhB,IAAI,GAAGgB,GAAG,CAAChB,IAAf;AACAD,QAAAA,cAAc,CAACC,IAAD,CAAd;;AACA,cAAKC,QAAL,CAAc;AACbK,UAAAA,OAAO,EAAE;AADI,SAAd;AAGA,OAPF,EAQEW,KARF,CAQQ,UAAUC,KAAV,EAAiB;AACvBb,QAAAA,gBAAgB;AAChB,eAAOc,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACA,OAXF;AAYA3B,MAAAA,aAAa,CAACkB,YAAD,CAAb,CACEM,IADF,CACO,UAAAC,GAAG,EAAI;AACZ,YAAIhB,IAAI,GAAGgB,GAAG,CAAChB,IAAf;;AACA,cAAKC,QAAL,CAAc;AACbK,UAAAA,OAAO,EAAE;AADI,SAAd;;AAGAH,QAAAA,aAAa,CAACH,IAAD,CAAb;AACA,OAPF,EAQEiB,KARF,CAQQ,UAAUC,KAAV,EAAiB;AACvBX,QAAAA,eAAe;AACf,eAAOY,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACA,OAXF;AAYA,KAnFkB;;AAAA,UAyFnBG,YAzFmB,GAyFJ,YAAM;AACpB,YAAKpB,QAAL,CAAc;AAAEqB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,KA3FkB;;AAAA,UA6FnBC,gBA7FmB,GA6FA,UAAAC,IAAI,EAAI;AAC1B,YAAKvB,QAAL,CACC;AACCW,QAAAA,aAAa,EAAEY;AADhB,OADD,EAIC;AAAA,eAAM,MAAKhB,wBAAL,EAAN;AAAA,OAJD;AAMA,KApGkB;;AAAA,UAsGnBiB,cAtGmB,GAsGF,YAAM;AACtB,UAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAb;;AACA,UAAIF,IAAI,CAACG,iBAAT,EAA4B;AAC3BH,QAAAA,IAAI,CAACG,iBAAL;;AACA,cAAK5B,QAAL,CAAc;AACb6B,UAAAA,UAAU,EAAE;AADC,SAAd;AAGA,OALD,MAKO,IAAIJ,IAAI,CAACK,uBAAT,EAAkC;AACxCL,QAAAA,IAAI,CAACK,uBAAL;;AACA,cAAK9B,QAAL,CAAc;AACb6B,UAAAA,UAAU,EAAE;AADC,SAAd;AAGA,OALM,MAKA,IAAIJ,IAAI,CAACM,mBAAT,EAA8B;AACpCN,QAAAA,IAAI,CAACM,mBAAL;;AACA,cAAK/B,QAAL,CAAc;AACb6B,UAAAA,UAAU,EAAE;AADC,SAAd;AAGA;AACD,KAxHkB;;AAAA,UA0HnBG,cA1HmB,GA0HF,YAAM;AACtBC,MAAAA,MAAM,CAACP,QAAP,CAAgBQ,cAAhB,GAAiCpB,IAAjC,CAAsC,UAAAqB,OAAO;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAJ;AAAA,OAA7C;;AAEA,YAAKnC,QAAL,CAAc;AACb6B,QAAAA,UAAU,EAAE;AADC,OAAd;AAGA,KAhIkB;;AAGlB,UAAKnB,KAAL,GAAa;AACZ4B,MAAAA,QAAQ,EAAE;AACTC,QAAAA,SAAS,EAAE,WADF;AAETC,QAAAA,QAAQ,EAAE,UAFD;AAGTC,QAAAA,IAAI,EAAE;AAHG,OADE;AAMZF,MAAAA,SAAS,EAAE,WANC;AAOZC,MAAAA,QAAQ,EAAE,UAPE;AAQZ7B,MAAAA,aAAa,EAAE,IAAI+B,IAAJ,EARH;AASZb,MAAAA,UAAU,EAAE,KATA;AAUZ5B,MAAAA,WAAW,EAAE,EAVD;AAWZE,MAAAA,UAAU,EAAE,EAXA;AAYZwC,MAAAA,YAAY,EAAE,IAZF;AAaZC,MAAAA,WAAW,EAAE,IAbD;AAcZvC,MAAAA,OAAO,EAAE;AAdG,KAAb;AAHkB;AAmBlB;;;;WAkED,6BAAoB;AACnB,WAAKE,wBAAL;AACA;;;WA2CD,+BAAsB;AAAA;;AACrB,UAAQoC,YAAR,GAAyB,KAAKjC,KAA9B,CAAQiC,YAAR;AAEA,aACCA,YAAY,iBACX,oBAAC,KAAD;AACC,QAAA,OAAO,EAAE,CADV;AAEC,QAAA,MAAM,EAAC,KAFR;AAGC,QAAA,SAAS,EAAEE,UAAU,CAACF,YAAY,CAACJ,SAAd,CAHtB;AAIC,QAAA,QAAQ,EAAEM,UAAU,CAACF,YAAY,CAACH,QAAd,CAJrB;AAKC,QAAA,YAAY,EAAE,KALf;AAMC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACxC,QAAL,CAAc;AAAE2C,YAAAA,YAAY,EAAE;AAAhB,WAAd,CAAN;AAAA,SANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAQC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEA,YAAd;AAA4B,QAAA,KAAK,EAAC,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARD,CAFF;AAcA;;;WAED,8BAAqB;AAAA;;AACpB,UAAQC,WAAR,GAAwB,KAAKlC,KAA7B,CAAQkC,WAAR;AAEA,aACCA,WAAW,iBACV,oBAAC,KAAD;AACC,QAAA,OAAO,EAAE,CADV;AAEC,QAAA,MAAM,EAAC,KAFR;AAGC,QAAA,SAAS,EAAEC,UAAU,CAACD,WAAW,CAACL,SAAb,CAHtB;AAIC,QAAA,QAAQ,EAAEM,UAAU,CAACD,WAAW,CAACJ,QAAb,CAJrB;AAKC,QAAA,YAAY,EAAE,KALf;AAMC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACxC,QAAL,CAAc;AAAE4C,YAAAA,WAAW,EAAE;AAAf,WAAd,CAAN;AAAA,SANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAQC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEA,WAAd;AAA2B,QAAA,KAAK,EAAC,8BAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARD,CAFF;AAcA,K,CAED;AACA;;;;WAEA,kBAAS;AAAA;;AACR,wBAOI,KAAKlC,KAPT;AAAA,UACC4B,QADD,eACCA,QADD;AAAA,UAEC3B,aAFD,eAECA,aAFD;AAAA,UAGCkB,UAHD,eAGCA,UAHD;AAAA,UAIC5B,WAJD,eAICA,WAJD;AAAA,UAKCE,UALD,eAKCA,UALD;AAAA,UAMCE,OAND,eAMCA,OAND;AASA,UAAQyC,CAAR,GAAc,KAAKjD,KAAnB,CAAQiD,CAAR;AAEA,UAAMC,cAAc,GAAG9C,WAAW,CAAC+C,GAAZ,CAAgB,UAAAC,OAAO;AAAA,4BAC7C,oBAAC,MAAD;AACC,UAAA,GAAG,EAAEA,OAAO,CAACC,IADd;AAEC,UAAA,SAAS,EAAEL,UAAU,CAACI,OAAO,CAACV,SAAT,CAFtB;AAGC,UAAA,QAAQ,EAAEM,UAAU,CAACI,OAAO,CAACT,QAAT,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKC,oBAAC,iBAAD;AACC,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACxC,QAAL,CAAc;AAAE2C,cAAAA,YAAY,EAAEM;AAAhB,aAAd,CAAN;AAAA,WADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALD,CAD6C;AAAA,OAAvB,CAAvB;AAWA,UAAME,aAAa,GAAGhD,UAAU,CAAC6C,GAAX,CAAe,UAAAI,MAAM;AAAA,4BAC1C,oBAAC,MAAD;AACC,UAAA,GAAG,EAAEA,MAAM,CAACF,IADb;AAEC,UAAA,SAAS,EAAEL,UAAU,CAACO,MAAM,CAACb,SAAR,CAFtB;AAGC,UAAA,QAAQ,EAAEM,UAAU,CAACO,MAAM,CAACZ,QAAR,CAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKC,oBAAC,gBAAD;AACC,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACxC,QAAL,CAAc;AAAE4C,cAAAA,WAAW,EAAEQ;AAAf,aAAd,CAAN;AAAA,WADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALD,CAD0C;AAAA,OAArB,CAAtB;AAYA,0BACC;AAAK,QAAA,SAAS,EAAC,MAAf;AAAsB,QAAA,EAAE,EAAC,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,qBADF,SAC4B,kBAD5B,CADD,CADD,eAMC;AACC,QAAA,KAAK,EAAE;AACNC,UAAAA,QAAQ,EAAE,UADJ;AAENC,UAAAA,GAAG,EAAE,GAFC;AAGNC,UAAAA,IAAI,EAAE,GAHA;AAINC,UAAAA,MAAM,EAAE,KAJF;AAKNC,UAAAA,eAAe,EAAE,MALX;AAMNC,UAAAA,MAAM,EAAE,MANF;AAONC,UAAAA,OAAO,EAAE,qBAPH;AAQNC,UAAAA,MAAM,EAAE,KARF;AASNC,UAAAA,OAAO,EAAE,MATH;AAUNC,UAAAA,YAAY,EAAE,MAVR;AAWNC,UAAAA,aAAa,EAAE;AAXT,SADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAeC,oBAAC,UAAD;AACC,QAAA,QAAQ,EAAE,kBAAAC,KAAK;AAAA,iBAAI,MAAI,CAAC1C,gBAAL,CAAsB0C,KAAtB,CAAJ;AAAA,SADhB,CAEC;AAFD;AAGC,QAAA,KAAK,EAAErD,aAHR;AAIC,QAAA,MAAM,EAAC,OAJR;AAKC,QAAA,MAAM,EAAC,QALR;AAMC,QAAA,SAAS,EAAC,MANX;AAOC,QAAA,aAAa,MAPd;AAQC,QAAA,SAAS,EAAE,IARZ;AASC,QAAA,iBAAiB,EAAC,cATnB;AAUC,QAAA,YAAY,eAAE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfD,eA4BC,oBAAC,MAAD;AACC,QAAA,OAAO,EACNkB,UAAU,KAAK,IAAf,GACG,KAAKG,cADR,GAEG,KAAKR,cAJV;AAMC,QAAA,KAAK,EAAEK,UAAU,GAAG,WAAH,GAAiB,SANnC;AAOC,QAAA,OAAO,EAAC,WAPT;AAQC,QAAA,SAAS,EAAC,OARX;AASC,QAAA,SAAS,eAAE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UATZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAWEA,UAAU,KAAK,IAAf,GACEiB,CAAC,CAAC,gBAAD,CADH,GAEEA,CAAC,CAAC,YAAD,CAbL,CA5BD,CAND,eAkDC;AACC,QAAA,KAAK,EAAE;AACNmB,UAAAA,KAAK,EAAE,MADD;AAENP,UAAAA,MAAM,EAAE,OAFF;AAGNQ,UAAAA,IAAI,EAAE,GAHA;AAINb,UAAAA,QAAQ,EAAE;AAJJ,SADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQEhD,OAAO,iBAAI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QARb,eAUC,oBAAC,UAAD,oBACKiC,QADL;AAEC,QAAA,KAAK,EAAC,MAFP;AAGC,QAAA,MAAM,EAAC,MAHR;AAIC,QAAA,QAAQ,EAAC,oCAJV;AAKC,QAAA,oBAAoB,EAAE3C,YALvB;AAMC,QAAA,gBAAgB,EAAE,0BAAA2C,QAAQ;AAAA,iBACzB,MAAI,CAACtC,QAAL,CAAc;AAAEsC,YAAAA,QAAQ,EAARA;AAAF,WAAd,CADyB;AAAA,SAN3B;AASC,QAAA,kBAAkB,EAAE,KATrB;AAUC,QAAA,OAAO,EAAE,KAAK6B,UAVf;AAWC,QAAA,kBAAkB,EAAE,GAXrB;AAYC,QAAA,sBAAsB,EAAE,IAAI/E,iBAAJ,EAZzB;AAaC,QAAA,MAAM,EAAE;AAAA,iBACP,MAAI,CAACY,QAAL,CAAc;AACbK,YAAAA,OAAO,EAAE;AADI,WAAd,CADO;AAAA,SAbT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAmBE0C,cAnBF,EAoBEI,aApBF,EAqBE,KAAKiB,mBAAL,EArBF,EAsBE,KAAKC,kBAAL,EAtBF,eAwBC,oBAAC,iBAAD;AACC,QAAA,KAAK,EAAE;AACNf,UAAAA,GAAG,EAAE,EADC;AAENgB,UAAAA,KAAK,EAAE;AAFD,SADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxBD,CAVD,CAlDD,CADD;AA+FA;;;;EA9S+B1F,a;;AAiTjC,eAAegB,kBAAf","sourcesContent":["import \"./MapStyle.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { Fullscreen, Today } from \"@material-ui/icons\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport React, { PureComponent } from \"react\";\r\nimport moment from \"moment\";\r\nimport DatePicker from \"react-date-picker\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport ReactMapGL, {\r\n\tNavigationControl,\r\n\tPopup,\r\n\tMarker,\r\n\tFlyToInterpolator,\r\n} from \"react-map-gl\";\r\nimport { getListPatient, getListVector } from \"./MapServices\";\r\n//import {Pin_layer_patient, Pin_layer_vector} from \"./Pin_layer\";\r\nimport Pin_layer_patient from \"./Pin_layer_patient\";\r\nimport Pin_layer_vector from \"./Pin_layer_vector\";\r\nimport Infor from \"./Patient_Infor\";\r\nimport SquareLoading from \"../Component/Loading/SquareLoading\";\r\n\r\nconst MAPBOX_TOKEN =\r\n\t\"pk.eyJ1IjoibWVvMTIzIiwiYSI6ImNrdTI2MTQzZzBoNzMyd3FrNWVpc3U1YjEifQ.zj-vYL4EgQI83LzH8w8n6g\";\r\n\r\nclass DengueMapComponent extends PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tviewport: {\r\n\t\t\t\tlongitude: 105.7933994,\r\n\t\t\t\tlatitude: 21.0282951,\r\n\t\t\t\tzoom: 14,\r\n\t\t\t},\r\n\t\t\tlongitude: 105.7926785,\r\n\t\t\tlatitude: 21.0283643,\r\n\t\t\tselectedMonth: new Date(),\r\n\t\t\tfullScreen: false,\r\n\t\t\tlistPatient: [],\r\n\t\t\tlistVector: [],\r\n\t\t\tpatientInfor: null,\r\n\t\t\tvectorInfor: null,\r\n\t\t\tloading: true,\r\n\t\t};\r\n\t}\r\n\r\n\tsetListPatient = data => {\r\n\t\tthis.setState({\r\n\t\t\tlistPatient: data,\r\n\t\t});\r\n\t};\r\n\r\n\tsetListVector = data => {\r\n\t\tthis.setState({\r\n\t\t\tlistVector: data,\r\n\t\t});\r\n\t};\r\n\r\n\tlistPatientError = () => {\r\n\t\tthis.setState({\r\n\t\t\tloading: false,\r\n\t\t\tlistPatient: [],\r\n\t\t});\r\n\t};\r\n\r\n\tlistVectorError = () => {\r\n\t\tthis.setState({\r\n\t\t\tloading: false,\r\n\t\t\tlistVector: [],\r\n\t\t});\r\n\t};\r\n\r\n\tpinAboutPatientAndVector = () => {\r\n\t\tthis.setState({\r\n\t\t\tloading: true,\r\n\t\t});\r\n\t\tlet searchObject = {};\r\n\t\tconst setListPatient = this.setListPatient;\r\n\t\tconst setListVector = this.setListVector;\r\n\t\tconst listPatientError = this.listPatientError;\r\n\t\tconst listVectorError = this.listVectorError;\r\n\t\tsearchObject.year = moment(this.state.selectedMonth).format(\"yyyy\");\r\n\t\tsearchObject.month = moment(this.state.selectedMonth).format(\"MM\");\r\n\r\n\t\tgetListPatient(searchObject)\r\n\t\t\t.then(res => {\r\n\t\t\t\tlet data = res.data;\r\n\t\t\t\tsetListPatient(data);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tlistPatientError();\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t});\r\n\t\tgetListVector(searchObject)\r\n\t\t\t.then(res => {\r\n\t\t\t\tlet data = res.data;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t});\r\n\t\t\t\tsetListVector(data);\r\n\t\t\t})\r\n\t\t\t.catch(function (error) {\r\n\t\t\t\tlistVectorError();\r\n\t\t\t\treturn Promise.reject(error);\r\n\t\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.pinAboutPatientAndVector();\r\n\t}\r\n\r\n\tonClosePopup = () => {\r\n\t\tthis.setState({ showPopup: false });\r\n\t};\r\n\r\n\thandleDateChange = date => {\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tselectedMonth: date,\r\n\t\t\t},\r\n\t\t\t() => this.pinAboutPatientAndVector()\r\n\t\t);\r\n\t};\r\n\r\n\tviewFullScreen = () => {\r\n\t\tconst elem = document.getElementById(\"map-wrapper\");\r\n\t\tif (elem.requestFullscreen) {\r\n\t\t\telem.requestFullscreen();\r\n\t\t\tthis.setState({\r\n\t\t\t\tfullScreen: true,\r\n\t\t\t});\r\n\t\t} else if (elem.webkitRequestFullscreen) {\r\n\t\t\telem.webkitRequestFullscreen();\r\n\t\t\tthis.setState({\r\n\t\t\t\tfullScreen: true,\r\n\t\t\t});\r\n\t\t} else if (elem.msRequestFullscreen) {\r\n\t\t\telem.msRequestFullscreen();\r\n\t\t\tthis.setState({\r\n\t\t\t\tfullScreen: true,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\texitFullScreen = () => {\r\n\t\twindow.document.exitFullscreen().then(success => console.log(success));\r\n\r\n\t\tthis.setState({\r\n\t\t\tfullScreen: false,\r\n\t\t});\r\n\t};\r\n\r\n\tPatient_renderPopup() {\r\n\t\tconst { patientInfor } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\tpatientInfor && (\r\n\t\t\t\t<Popup\r\n\t\t\t\t\ttipSize={5}\r\n\t\t\t\t\tanchor=\"top\"\r\n\t\t\t\t\tlongitude={parseFloat(patientInfor.longitude)}\r\n\t\t\t\t\tlatitude={parseFloat(patientInfor.latitude)}\r\n\t\t\t\t\tcloseOnClick={false}\r\n\t\t\t\t\tonClose={() => this.setState({ patientInfor: null })}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Infor infor={patientInfor} _type=\"Ca bệnh\" />\r\n\t\t\t\t</Popup>\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tVector_renderPopup() {\r\n\t\tconst { vectorInfor } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\tvectorInfor && (\r\n\t\t\t\t<Popup\r\n\t\t\t\t\ttipSize={5}\r\n\t\t\t\t\tanchor=\"top\"\r\n\t\t\t\t\tlongitude={parseFloat(vectorInfor.longitude)}\r\n\t\t\t\t\tlatitude={parseFloat(vectorInfor.latitude)}\r\n\t\t\t\t\tcloseOnClick={false}\r\n\t\t\t\t\tonClose={() => this.setState({ vectorInfor: null })}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Infor infor={vectorInfor} _type=\"Vector truyền bệnh\" />\r\n\t\t\t\t</Popup>\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\t// metersToPixelsAtMaxZoom = (meters, latitude) =>\r\n\t//   meters / 0.075 / Math.cos((latitude * Math.PI) / 180);\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tviewport,\r\n\t\t\tselectedMonth,\r\n\t\t\tfullScreen,\r\n\t\t\tlistPatient,\r\n\t\t\tlistVector,\r\n\t\t\tloading,\r\n\t\t} = this.state;\r\n\r\n\t\tconst { t } = this.props;\r\n\r\n\t\tconst markersPatient = listPatient.map(patient => (\r\n\t\t\t<Marker\r\n\t\t\t\tkey={patient.name}\r\n\t\t\t\tlongitude={parseFloat(patient.longitude)}\r\n\t\t\t\tlatitude={parseFloat(patient.latitude)}\r\n\t\t\t>\r\n\t\t\t\t<Pin_layer_patient\r\n\t\t\t\t\tonClick={() => this.setState({ patientInfor: patient })}\r\n\t\t\t\t/>\r\n\t\t\t</Marker>\r\n\t\t));\r\n\t\tconst markersVector = listVector.map(vector => (\r\n\t\t\t<Marker\r\n\t\t\t\tkey={vector.name}\r\n\t\t\t\tlongitude={parseFloat(vector.longitude)}\r\n\t\t\t\tlatitude={parseFloat(vector.latitude)}\r\n\t\t\t>\r\n\t\t\t\t<Pin_layer_vector\r\n\t\t\t\t\tonClick={() => this.setState({ vectorInfor: vector })}\r\n\t\t\t\t/>\r\n\t\t\t</Marker>\r\n\t\t));\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"flex\" id=\"map-wrapper\">\r\n\t\t\t\t<Helmet>\r\n\t\t\t\t\t<title>\r\n\t\t\t\t\t\t{\"Bản đồ điều tra SXH\"} | {\"Facility Service\"}\r\n\t\t\t\t\t</title>\r\n\t\t\t\t</Helmet>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\ttop: \"0\",\r\n\t\t\t\t\t\tleft: \"0\",\r\n\t\t\t\t\t\tzIndex: \"999\",\r\n\t\t\t\t\t\tbackgroundColor: \"#fff\",\r\n\t\t\t\t\t\theight: \"25vh\",\r\n\t\t\t\t\t\tpadding: \"30px 20px 20px 20px\",\r\n\t\t\t\t\t\tmargin: \"5px\",\r\n\t\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\t\tborderRadius: \"10px\",\r\n\t\t\t\t\t\tflexDirection: \"column\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t<DatePicker\r\n\t\t\t\t\t\tonChange={event => this.handleDateChange(event)}\r\n\t\t\t\t\t\t//onChange={this.handleDateChange}\r\n\t\t\t\t\t\tvalue={selectedMonth}\r\n\t\t\t\t\t\tlocale=\"vi-VN\"\r\n\t\t\t\t\t\tformat=\"M/yyyy\"\r\n\t\t\t\t\t\tmaxDetail=\"year\"\r\n\t\t\t\t\t\tcloseCalendar\r\n\t\t\t\t\t\tclearIcon={null}\r\n\t\t\t\t\t\tcalendarClassName=\"month-picker\"\r\n\t\t\t\t\t\tcalendarIcon={<Today />}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tonClick={\r\n\t\t\t\t\t\t\tfullScreen === true\r\n\t\t\t\t\t\t\t\t? this.exitFullScreen\r\n\t\t\t\t\t\t\t\t: this.viewFullScreen\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcolor={fullScreen ? \"secondary\" : \"primary\"}\r\n\t\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\t\tclassName=\"mt-20\"\r\n\t\t\t\t\t\tstartIcon={<Fullscreen />}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{fullScreen === true\r\n\t\t\t\t\t\t\t? t(\"exitFullScreen\")\r\n\t\t\t\t\t\t\t: t(\"fullScreen\")}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div\r\n\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\twidth: \"60vw\",\r\n\t\t\t\t\t\theight: \"100vh\",\r\n\t\t\t\t\t\tflex: \"1\",\r\n\t\t\t\t\t\tposition: \"relative\",\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{loading && <SquareLoading />}\r\n\r\n\t\t\t\t\t<ReactMapGL\r\n\t\t\t\t\t\t{...viewport}\r\n\t\t\t\t\t\twidth=\"100%\"\r\n\t\t\t\t\t\theight=\"100%\"\r\n\t\t\t\t\t\tmapStyle=\"mapbox://styles/mapbox/streets-v11\"\r\n\t\t\t\t\t\tmapboxApiAccessToken={MAPBOX_TOKEN}\r\n\t\t\t\t\t\tonViewportChange={viewport =>\r\n\t\t\t\t\t\t\tthis.setState({ viewport })\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tattributionControl={false}\r\n\t\t\t\t\t\tonClick={this.onMapClick}\r\n\t\t\t\t\t\ttransitionDuration={150}\r\n\t\t\t\t\t\ttransitionInterpolator={new FlyToInterpolator()}\r\n\t\t\t\t\t\tonLoad={() =>\r\n\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\tloading: false,\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{markersPatient}\r\n\t\t\t\t\t\t{markersVector}\r\n\t\t\t\t\t\t{this.Patient_renderPopup()}\r\n\t\t\t\t\t\t{this.Vector_renderPopup()}\r\n\r\n\t\t\t\t\t\t<NavigationControl\r\n\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\ttop: 10,\r\n\t\t\t\t\t\t\t\tright: 10,\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</ReactMapGL>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default DengueMapComponent;\r\n"]},"metadata":{},"sourceType":"module"}