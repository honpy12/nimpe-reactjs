{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { useEffect, useCallback, useState, useRef, useMemo } from 'react';\nimport * as PropTypes from 'prop-types';\nimport mapboxgl from '../utils/mapboxgl';\nimport useMapControl, { mapControlDefaultProps, mapControlPropTypes } from './use-map-control';\nvar propTypes = Object.assign({}, mapControlPropTypes, {\n  toggleLabel: PropTypes.string,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  compact: PropTypes.bool,\n  customAttribution: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)])\n});\nvar defaultProps = Object.assign({}, mapControlDefaultProps, {\n  className: '',\n  toggleLabel: 'Toggle Attribution'\n});\n\nfunction setupAttributioncontrol(opts, map, container, attributionContainer) {\n  var control = new mapboxgl.AttributionControl(opts);\n  control._map = map;\n  control._container = container;\n  control._innerContainer = attributionContainer;\n\n  control._updateAttributions();\n\n  control._updateEditLink();\n\n  map.on('styledata', control._updateData);\n  map.on('sourcedata', control._updateData);\n  return control;\n}\n\nfunction removeAttributionControl(control) {\n  control._map.off('styledata', control._updateData);\n\n  control._map.off('sourcedata', control._updateData);\n}\n\nfunction AttributionControl(props) {\n  var _useMapControl = useMapControl(props),\n      context = _useMapControl.context,\n      containerRef = _useMapControl.containerRef;\n\n  var innerContainerRef = useRef(null);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      showCompact = _useState2[0],\n      setShowCompact = _useState2[1];\n\n  useEffect(function () {\n    var control;\n\n    if (context.map) {\n      control = setupAttributioncontrol({\n        customAttribution: props.customAttribution\n      }, context.map, containerRef.current, innerContainerRef.current);\n    }\n\n    return function () {\n      return control && removeAttributionControl(control);\n    };\n  }, [context.map]);\n  var compact = props.compact === undefined ? context.viewport.width <= 640 : props.compact;\n  useEffect(function () {\n    if (!compact && showCompact) {\n      setShowCompact(false);\n    }\n  }, [compact]);\n  var toggleAttribution = useCallback(function () {\n    return setShowCompact(function (value) {\n      return !value;\n    });\n  }, []);\n  var style = useMemo(function () {\n    return _objectSpread({\n      position: 'absolute'\n    }, props.style);\n  }, [props.style]);\n  return React.createElement(\"div\", {\n    style: style,\n    className: props.className\n  }, React.createElement(\"div\", {\n    ref: containerRef,\n    \"aria-pressed\": showCompact,\n    className: \"mapboxgl-ctrl mapboxgl-ctrl-attrib \".concat(compact ? 'mapboxgl-compact' : '', \" \").concat(showCompact ? 'mapboxgl-compact-show' : '')\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"mapboxgl-ctrl-attrib-button\",\n    title: props.toggleLabel,\n    onClick: toggleAttribution\n  }), React.createElement(\"div\", {\n    ref: innerContainerRef,\n    className: \"mapboxgl-ctrl-attrib-inner\",\n    role: \"list\"\n  })));\n}\n\nAttributionControl.propTypes = propTypes;\nAttributionControl.defaultProps = defaultProps;\nexport default React.memo(AttributionControl);","map":null,"metadata":{},"sourceType":"module"}